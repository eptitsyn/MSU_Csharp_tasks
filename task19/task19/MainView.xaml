<Window x:Class="task19.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:task19"
        xmlns:io="clr-namespace:System.IO;assembly=mscorlib"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        mc:Ignorable="d"
        Height="324.778" Width="868.389">
    <Window.Resources>
        <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <local:UriToStringConverter x:Key="UriToStringConverter" />
        <!-- Play button-->
        <Style x:Key="PlayButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Black"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Ellipse x:Name="btnelipse1"  Width="44" Height="44">
                            <Ellipse.Fill>
                                <ImageBrush x:Name="elipseimg" ImageSource="img/play.png"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="btnelipse1" Property="Fill">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="img/plau_highlited.png"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="btnelipse1" Property="Fill">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="img/play_pressed.png"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="btnelipse1" Property="Fill">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="img/play_disabled.png"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <!--<DataTrigger Binding="{Binding ElementName=MediaWindow, Path=CanPause}">
                                <Setter TargetName="btnelipse1" Property="Fill">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="img/play_pause.png"/>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>-->
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Mute Checkbox-->
        <Style x:Key="MuteButtonStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid>
                            <Rectangle Name="cbSelection" Width="25" Height="25"/>
                            <Rectangle Name="cbRect" Width="25" Height="25">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="img/mute_standard.png" />
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="cbRect" Property="Fill">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="img/mute_checked.png"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="cbSelection" Property="Fill">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="img/mute_selected.png"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="cbSelection" Property="Fill">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="img/mute_s_pressed.png"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Volume Slider. from MSDN-->
        <Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Height" Value="13"/>
            <Setter Property="Width" Value="12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Ellipse Name="Ellipse">
                            <Ellipse.Fill>
                                <ImageBrush ImageSource="img/sliderthumb.png"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Ellipse" Property="Fill">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="img/sliderthumb_mouseover.png"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsDragging" Value="True">
                                <Setter TargetName="Ellipse" Property="Fill">
                                    <Setter.Value>
                                        <ImageBrush ImageSource="img/sliderthumb_pressed.png"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Ellipse" Property="Fill" Value="DarkGray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="VolumeStyle" TargetType="{x:Type Slider}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Slider}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto" MinHeight="{TemplateBinding Slider.MinHeight}"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Border 
      Name="TrackBackground"
      Margin="0"
      CornerRadius="2" 
      Height="4"
      Grid.Row="1"
      Background="Gray" 
      BorderBrush="DarkGray"
      BorderThickness="1" />
                            <Track Grid.Row="1" Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton 
          Style="{StaticResource SliderButtonStyle}"
          Command="Slider.DecreaseLarge" />
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource SliderThumbStyle}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton 
          Style="{StaticResource SliderButtonStyle}"
          Command="Slider.IncreaseLarge" />
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Grid>
                        <ControlTemplate.Triggers>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- end of voume slider -->
        <!-- button auto style-->
        <Style x:Key="ButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border CornerRadius="10">
                            <Rectangle Margin="2" StrokeThickness="1" Stroke="#60000000" StrokeDashArray="1 2"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Button}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
            <Setter Property="MinHeight" Value="24"/>
            <Setter Property="MinWidth" Value="24"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="Border" CornerRadius="12" BorderThickness="1" Background="LightBlue" BorderBrush="DarkBlue">
                            <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter TargetName="Border" Property="BorderBrush" Value="Red" />
                            </Trigger>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter TargetName="Border" Property="BorderBrush" Value="Wheat" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="Blue" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="DarkBlue" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="DarkGray" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background" Value="Gray" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="Gray" />
                                <Setter Property="Foreground" Value="LightGray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Window.Title>
        <Binding Path="MediaWindowUri">
            <Binding.Converter>
                <StaticResource ResourceKey="UriToStringConverter"/>
            </Binding.Converter>
            <Binding.StringFormat>MediaPlayer - {0}</Binding.StringFormat>
        </Binding>
    </Window.Title>
    <!--<Window.DataContext>
        <local:MainViewModel x:Name="MainViewModel"/>
    </Window.DataContext>-->
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="File">
                <Separator/>
                <MenuItem Header="Exit" Command="{Binding ExitCommand}"/>
            </MenuItem>
            <MenuItem Header="View">
                <MenuItem x:Name="PlaylistCheckbox" Header="Playlist" IsCheckable="True" IsChecked="True"/>
            </MenuItem>
        </Menu>
        <Grid DockPanel.Dock="Bottom">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <StackPanel Orientation="Horizontal" Grid.Column="1">
                <Button Content="Stop" Command="{Binding StopCommand}"/>
                <Button Content="Prev" Command="{Binding PrevCommand}"/>
                <Button Content="Play" Command="{Binding PlayCommand}" Style="{StaticResource PlayButtonStyle}"/>
                <Button Content="Next" Command="{Binding NextCommand}"/>
                <CheckBox Content="Mute" Style="{StaticResource MuteButtonStyle}" VerticalAlignment="Center" IsChecked="{Binding ElementName=MediaWindow,Path=IsMuted}"/>
                <Slider Width="100" Maximum="1" Style="{StaticResource VolumeStyle}" Value="{Binding ElementName=MediaWindow, Path=Volume}" VerticalAlignment="Center"/>
            </StackPanel>
        </Grid>
        <Grid DockPanel.Dock="Left" Visibility="{Binding ElementName=PlaylistCheckbox, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="15*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock Text="Playlist"/>
            <ListView x:Name="PlaylistList" MinWidth="100" MaxWidth="300"  ItemsSource="{Binding Playlist}" SelectedItem="{Binding Path=SelectedUri, Mode=TwoWay}" Grid.Row="1">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding PlayCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>

            </ListView>
            <StackPanel Grid.Row="2" Orientation="Horizontal">
                <Button Content="Add" Command="{Binding AddToPlaylistCommand}"/>
                <Button Content="Remove" Command="{Binding RemoveFromPlaylistCommand}"/>
            </StackPanel>
        </Grid>
        <Slider Name="TimelineSlider" DockPanel.Dock="Bottom" Thumb.DragCompleted="TimelineSlider_OnDragCompleted"/>
        <Grid Background="Black">
            <MediaElement Name="MediaWindow" MediaOpened="MediaWindow_OnMediaOpened" Source="{Binding MediaWindowUri}" LoadedBehavior="Play">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MediaEnded">
                        <i:InvokeCommandAction Command="{Binding MediaEndedCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </MediaElement>
        </Grid>
    </DockPanel>

</Window>
